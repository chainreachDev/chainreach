/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ChainVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "brand"
      | "campaignData"
      | "creator"
      | "payoutAmount"
      | "status"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCancelled"
      | "PaymentWithdrawn"
      | "PostVerified"
      | "VaultFunded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "brand", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "campaignData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;

  decodeFunctionResult(functionFragment: "brand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "campaignData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
}

export namespace CampaignCancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentWithdrawnEvent {
  export type InputTuple = [creator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [creator: string, amount: bigint];
  export interface OutputObject {
    creator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostVerifiedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultFundedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainVault extends BaseContract {
  connect(runner?: ContractRunner | null): ChainVault;
  waitForDeployment(): Promise<this>;

  interface: ChainVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  brand: TypedContractMethod<[], [string], "view">;

  campaignData: TypedContractMethod<[], [string], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  payoutAmount: TypedContractMethod<[], [bigint], "view">;

  status: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "brand"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "campaignData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payoutAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CampaignCancelled"
  ): TypedContractEvent<
    CampaignCancelledEvent.InputTuple,
    CampaignCancelledEvent.OutputTuple,
    CampaignCancelledEvent.OutputObject
  >;
  getEvent(
    key: "PaymentWithdrawn"
  ): TypedContractEvent<
    PaymentWithdrawnEvent.InputTuple,
    PaymentWithdrawnEvent.OutputTuple,
    PaymentWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PostVerified"
  ): TypedContractEvent<
    PostVerifiedEvent.InputTuple,
    PostVerifiedEvent.OutputTuple,
    PostVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "VaultFunded"
  ): TypedContractEvent<
    VaultFundedEvent.InputTuple,
    VaultFundedEvent.OutputTuple,
    VaultFundedEvent.OutputObject
  >;

  filters: {
    "CampaignCancelled()": TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;
    CampaignCancelled: TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;

    "PaymentWithdrawn(address,uint256)": TypedContractEvent<
      PaymentWithdrawnEvent.InputTuple,
      PaymentWithdrawnEvent.OutputTuple,
      PaymentWithdrawnEvent.OutputObject
    >;
    PaymentWithdrawn: TypedContractEvent<
      PaymentWithdrawnEvent.InputTuple,
      PaymentWithdrawnEvent.OutputTuple,
      PaymentWithdrawnEvent.OutputObject
    >;

    "PostVerified()": TypedContractEvent<
      PostVerifiedEvent.InputTuple,
      PostVerifiedEvent.OutputTuple,
      PostVerifiedEvent.OutputObject
    >;
    PostVerified: TypedContractEvent<
      PostVerifiedEvent.InputTuple,
      PostVerifiedEvent.OutputTuple,
      PostVerifiedEvent.OutputObject
    >;

    "VaultFunded(uint256)": TypedContractEvent<
      VaultFundedEvent.InputTuple,
      VaultFundedEvent.OutputTuple,
      VaultFundedEvent.OutputObject
    >;
    VaultFunded: TypedContractEvent<
      VaultFundedEvent.InputTuple,
      VaultFundedEvent.OutputTuple,
      VaultFundedEvent.OutputObject
    >;
  };
}
